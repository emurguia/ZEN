type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | STRING
  | VOID
  | LIST
  | TUPLE
  | INT_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | TUPLE_LITERAL of (float * float)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 48 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* TRUE *);
  276 (* FALSE *);
  277 (* AND *);
  278 (* OR *);
  279 (* RETURN *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* FOR *);
  283 (* WHILE *);
  284 (* INT *);
  285 (* BOOL *);
  286 (* FLOAT *);
  287 (* STRING *);
  288 (* VOID *);
  289 (* LIST *);
  290 (* TUPLE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  291 (* INT_LITERAL *);
  292 (* FLOAT_LITERAL *);
  293 (* STRING_LITERAL *);
  294 (* ID *);
  295 (* TUPLE_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\013\000\013\000\
\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\000\000\002\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\005\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\059\000\000\000\010\000\011\000\012\000\013\000\
\015\000\014\000\001\000\003\000\004\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\016\000\
\000\000\000\000\009\000\017\000\000\000\000\000\000\000\000\000\
\019\000\005\000\000\000\000\000\034\000\035\000\000\000\000\000\
\000\000\000\000\031\000\032\000\033\000\000\000\020\000\000\000\
\000\000\000\000\049\000\050\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\024\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\053\000\000\000\
\000\000\028\000\000\000\000\000\000\000\026\000\000\000\000\000\
\027\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\019\000\026\000\030\000\
\020\000\047\000\048\000\079\000\082\000\083\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\231\254\063\255\000\000\
\033\001\238\254\025\255\042\255\000\000\048\255\033\001\000\000\
\033\255\033\001\000\000\000\000\035\255\064\255\081\255\096\255\
\000\000\000\000\096\255\096\255\000\000\000\000\043\255\087\255\
\094\255\095\255\000\000\000\000\000\000\010\255\000\000\033\000\
\218\000\101\255\000\000\000\000\000\000\051\000\096\255\096\255\
\096\255\096\255\096\255\000\000\096\255\096\255\096\255\096\255\
\096\255\096\255\096\255\096\255\096\255\096\255\096\255\096\255\
\000\000\096\255\000\000\000\000\234\000\026\001\106\255\250\000\
\026\001\107\255\105\255\026\001\076\255\076\255\000\000\000\000\
\042\001\042\001\085\255\085\255\085\255\085\255\010\000\001\255\
\010\001\212\255\096\255\212\255\000\000\096\255\000\000\089\255\
\069\000\000\000\026\001\212\255\096\255\000\000\109\255\212\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\115\255\000\000\000\000\116\255\000\000\000\000\000\000\000\000\
\000\000\138\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\250\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\121\255\
\000\000\126\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\255\000\000\000\000\
\255\254\000\000\127\255\040\255\091\000\113\000\000\000\000\000\
\146\255\183\255\135\000\157\000\179\000\201\000\053\255\150\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\255\
\000\000\000\000\047\255\000\000\132\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\115\000\000\000\100\000\000\000\000\000\111\000\
\000\000\205\255\224\255\036\000\000\000\000\000"

let yytablesize = 579
let yytable = "\049\000\
\011\000\057\000\051\000\052\000\057\000\001\000\054\000\061\000\
\062\000\063\000\064\000\058\000\015\000\065\000\066\000\067\000\
\068\000\069\000\070\000\021\000\059\000\071\000\077\000\078\000\
\080\000\081\000\084\000\022\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\051\000\097\000\051\000\053\000\032\000\051\000\104\000\023\000\
\106\000\058\000\035\000\024\000\058\000\047\000\036\000\047\000\
\110\000\030\000\047\000\030\000\113\000\037\000\038\000\016\000\
\017\000\032\000\105\000\033\000\034\000\107\000\027\000\035\000\
\031\000\047\000\047\000\036\000\078\000\043\000\044\000\045\000\
\046\000\016\000\037\000\038\000\063\000\064\000\039\000\040\000\
\055\000\041\000\042\000\061\000\062\000\063\000\064\000\056\000\
\057\000\032\000\043\000\044\000\045\000\046\000\032\000\035\000\
\033\000\075\000\099\000\036\000\035\000\101\000\102\000\112\000\
\036\000\108\000\037\000\038\000\018\000\006\000\007\000\037\000\
\038\000\029\000\025\000\039\000\040\000\029\000\041\000\042\000\
\055\000\056\000\043\000\044\000\045\000\046\000\029\000\043\000\
\044\000\045\000\046\000\019\000\028\000\019\000\019\000\050\000\
\111\000\019\000\041\000\000\000\041\000\019\000\048\000\041\000\
\048\000\000\000\000\000\048\000\019\000\019\000\041\000\041\000\
\019\000\019\000\000\000\019\000\019\000\000\000\041\000\041\000\
\000\000\000\000\000\000\048\000\019\000\019\000\019\000\019\000\
\025\000\000\000\025\000\025\000\000\000\000\000\025\000\042\000\
\000\000\042\000\025\000\000\000\042\000\000\000\000\000\000\000\
\000\000\025\000\025\000\042\000\042\000\025\000\025\000\000\000\
\025\000\025\000\000\000\042\000\042\000\000\000\000\000\000\000\
\000\000\025\000\025\000\025\000\025\000\032\000\000\000\033\000\
\000\000\000\000\000\000\035\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\038\000\
\000\000\000\000\039\000\040\000\000\000\041\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\044\000\
\045\000\046\000\036\000\000\000\036\000\000\000\000\000\036\000\
\036\000\036\000\036\000\036\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\000\000\036\000\036\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\005\000\006\000\007\000\008\000\
\009\000\060\000\010\000\000\000\000\000\000\000\000\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\076\000\000\000\071\000\072\000\000\000\
\000\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\109\000\000\000\071\000\
\072\000\000\000\000\000\061\000\062\000\063\000\064\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\071\000\072\000\037\000\000\000\037\000\000\000\000\000\
\037\000\037\000\037\000\000\000\000\000\000\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\000\000\037\000\
\037\000\038\000\000\000\038\000\000\000\000\000\038\000\038\000\
\038\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\000\000\000\000\038\000\038\000\043\000\
\000\000\043\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\043\000\043\000\044\000\000\000\044\000\
\000\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\000\000\044\000\044\000\045\000\000\000\045\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\000\000\000\000\045\000\
\045\000\046\000\000\000\046\000\000\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\073\000\046\000\046\000\074\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\098\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\100\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\103\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\005\000\006\000\007\000\008\000\
\009\000\000\000\010\000"

let yycheck = "\032\000\
\000\000\003\001\035\000\036\000\006\001\001\000\039\000\007\001\
\008\001\009\001\010\001\002\001\038\001\013\001\014\001\015\001\
\016\001\017\001\018\001\038\001\011\001\021\001\055\000\056\000\
\057\000\058\000\059\000\003\001\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\001\001\074\000\003\001\001\001\002\001\006\001\098\000\006\001\
\100\000\003\001\008\001\004\001\006\001\001\001\012\001\003\001\
\108\000\001\001\006\001\003\001\112\000\019\001\020\001\001\001\
\002\001\002\001\099\000\004\001\005\001\102\000\038\001\008\001\
\038\001\021\001\022\001\012\001\109\000\035\001\036\001\037\001\
\038\001\001\001\019\001\020\001\009\001\010\001\023\001\024\001\
\002\001\026\001\027\001\007\001\008\001\009\001\010\001\002\001\
\002\001\002\001\035\001\036\001\037\001\038\001\002\001\008\001\
\004\001\005\001\001\001\012\001\008\001\003\001\006\001\003\001\
\012\001\025\001\019\001\020\001\017\000\003\001\003\001\019\001\
\020\001\001\001\023\000\023\001\024\001\026\000\026\001\027\001\
\003\001\003\001\035\001\036\001\037\001\038\001\003\001\035\001\
\036\001\037\001\038\001\002\001\026\000\004\001\005\001\033\000\
\109\000\008\001\001\001\255\255\003\001\012\001\001\001\006\001\
\003\001\255\255\255\255\006\001\019\001\020\001\013\001\014\001\
\023\001\024\001\255\255\026\001\027\001\255\255\021\001\022\001\
\255\255\255\255\255\255\022\001\035\001\036\001\037\001\038\001\
\002\001\255\255\004\001\005\001\255\255\255\255\008\001\001\001\
\255\255\003\001\012\001\255\255\006\001\255\255\255\255\255\255\
\255\255\019\001\020\001\013\001\014\001\023\001\024\001\255\255\
\026\001\027\001\255\255\021\001\022\001\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\002\001\255\255\004\001\
\255\255\255\255\255\255\008\001\255\255\255\255\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\036\001\
\037\001\038\001\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\028\001\029\001\030\001\031\001\
\032\001\001\001\034\001\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\001\001\255\255\021\001\022\001\255\255\
\255\255\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\001\001\255\255\021\001\
\022\001\255\255\255\255\007\001\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\022\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\021\001\022\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\022\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\003\001\021\001\022\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\003\001\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\003\001\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\003\001\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\028\001\029\001\030\001\031\001\
\032\001\255\255\034\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  VOID\000\
  LIST\000\
  TUPLE\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  TUPLE_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 36 "parser.mly"
            ( _1 )
# 378 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                 ( [], [] )
# 384 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 41 "parser.mly"
                ( (_2 :: fst _1), snd _1 )
# 392 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 42 "parser.mly"
                ( fst _1, (_2 :: snd _1) )
# 400 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
     ( { typ = _1;
      fname = _2;
      formals = List.rev _4;
      locals = List.rev _7;
      body = List.rev _8 } )
# 415 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
                  ( [] )
# 421 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 54 "parser.mly"
                  ( List.rev _1 )
# 428 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
                             ( [(_1,_2)] )
# 436 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                             ( (_3,_4) :: _1 )
# 445 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
      ( Int )
# 451 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
       ( Bool )
# 457 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
        ( Float )
# 463 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
         ( String )
# 469 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
        ( Tuple )
# 475 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
       ( Void )
# 481 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                     ( [] )
# 487 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 71 "parser.mly"
                     ( _2 :: _1 )
# 495 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 75 "parser.mly"
               ( (_1, _2) )
# 503 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                   ( [] )
# 509 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                   ( _2 :: _1 )
# 517 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
              ( Expr _1 )
# 524 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( Return Noexpr )
# 530 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                     ( Return _2 )
# 537 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 93 "parser.mly"
                            ( Block(List.rev _2) )
# 544 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 552 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                                            ( If(_3, _5, _7) )
# 561 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 97 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 571 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 98 "parser.mly"
                                  ( While(_3, _5) )
# 579 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                  ( Noexpr )
# 585 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                  ( _1 )
# 592 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 105 "parser.mly"
                     ( IntLiteral(_1) )
# 599 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 106 "parser.mly"
                     ( FloatLiteral(string_of_float _1) )
# 606 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                     ( StringLiteral(_1) )
# 613 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                     ( BooleanLiteral(true) )
# 619 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                     ( BooleanLiteral(false) )
# 625 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                     ( Id(_1) )
# 632 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 640 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 648 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 656 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 664 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 672 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 680 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 688 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 696 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 704 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                         ( Unop(Neg, _2) )
# 735 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Unop(Not, _2) )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Assign(_1, _3) )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 128 "parser.mly"
                                 ( Call(_1, _3) )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                  ( TupleLiteral(_2,_4) )
# 766 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                       ( _2 )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                  ( [] )
# 779 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 136 "parser.mly"
                  ( List.rev _1 )
# 786 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                            ( [_1] )
# 793 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                            ( _3 :: _1 )
# 801 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
